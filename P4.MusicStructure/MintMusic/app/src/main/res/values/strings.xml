<resources>
    <string name="app_name">Mint Music</string>
    <string name="mainActivityUsage">This is the Main Activity for the app. In my design, this app is a music streaming service, like Saavn.\n\tWhile in online mode, this activity will show the current trending Songs and albums. \n\tIn offline mode, this activity will show the user\'s saved(downloaded/cached) songs list, as well as any playlists created by the user\n\tBelow are the buttons which will take us to different activities, From here, we need access to the Now Playing Screen, the playlist detail screen, and the my account screen</string>
    <string name="title_activity_now_playing">Now Playing</string>
    <string name="nowPlayingDetail">This screen is for the now playing section of the app. We will have an album art on top, over which there will be the name of the currently playing song and the artist, with a semi-transparent background. In the lower half of the screen, we can display the current play queue. (This will require the use of Fragments and databases to store the playing queue when the app is closed.) On long clicking a song in the queue, the app will open the song details screen, meeting the project rubric, for now, I\'m only making a button to go to the Song details screen. On the titleBar(ActionBar) we need a back button to go back to the main screen. For the music to keep playing in the background even when the app is not in focus/screen, we will need to implement a background service.</string>
    <string name="Song_detail">This Screen will show a song\'s details. The song name is passed as an intent from the source app, and is then processed by an AsyncTask The Screen shall include an ImageView of the album art, the Song Name, Artists\' name, the main distribution company, the song language, release year and the length of the song There will be a play button which adds this song to the Now Playing list and plays it. This is done by passing an intent to the now playing background service. Apart from that, we need a back button in the action bar.</string>
    <string name="playlist_description">This screen shall contain a list with the songs in a user-created/shared playlist. there will be a play button next to each song, which will add the song to the now playing queue and if no song is playing, play that song. Each element in the list will contain the name of the song, a small thumbnail of the cover-art, and a play button. A long press on the song will take us to the song details activity with an intent specifying the unique song-id from the server/client database to maintain a proper nad easy sync. I\'m adding a button to the song detail screen with an empty intent for now, we will need app-wide networking for providing the song\'s unique id from one activity to another.</string>
    <string name="playList_activity_label">Playlist Name here</string>
    <string name="my_account_activityName">My Account</string>
    <string name="myAccountDesc">This screen will display the user\' account information and settings. We will have a Pro option to add additional features account-wide, thereby making the service available across different devices. This will require the use of custom made API from the servers or from a third-party payment service like google play-billing depending on the region of the user. The activity will also show details of memory used by the downloaded songs, and an option to sync all songs with other devices and to clear all downloads(which on the back end will require the use of Media Storage and background downloads APIs). There will be options for social linking for accounts, providing access to account from google+, Facebook etc. Settings will also contain the option to select the audio-quality, and to sync over cellular networks. This screen is going to act like a Preferences screen, so we don\'t need access to any activity from here accept the back button.</string>
    <string name="now_playing">Now Playing</string>
    <string name="playlist_details">Playlist Details</string>
    <string name="my_account">My Account</string>
    <string name="song_details">Song Details</string>
</resources>
